declaredName 'dc'
moduleNames ['dc', 'core']
defs [term('Terminals.sv', 5, 9, 'dc:IntLit_t', /[0-9]+/),
 term('Terminals.sv', 9, 9, 'dc:Plus_t', /[\+]/),
 term('Terminals.sv', 10, 9, 'dc:Dash_t', /[\-]/),
 term('Terminals.sv', 11, 9, 'dc:Star_t', /[\*]/),
 term('Terminals.sv', 12, 9, 'dc:Slash_t', /[\/]/),
 term('Terminals.sv', 13, 9, 'dc:Hat_t', /[\^]/),
 term('Terminals.sv', 15, 9, 'dc:LParen_t', /[\(]/),
 term('Terminals.sv', 16, 9, 'dc:RParen_t', /[\)]/),
 term('Terminals.sv', 18, 9, 'dc:LessThan_t', /[\<]/),
 term('Terminals.sv', 19, 9, 'dc:LessThanOrEqualTo_t', /[\<][\=]/),
 term('Terminals.sv', 20, 9, 'dc:GreaterThan_t', /[\>]/),
 term('Terminals.sv', 21, 9, 'dc:GreaterThanOrEqualTo_t', /[\>][\=]/),
 term('Terminals.sv', 22, 9, 'dc:EqualTo_t', /[\=][\=]/),
 term('Terminals.sv', 23, 9, 'dc:NotEqualTo_t', /[\!][\=]/),
 term('Terminals.sv', 25, 9, 'dc:AndOp_t', /[\&][\&]/),
 term('Terminals.sv', 26, 9, 'dc:OrOp_t', /[\|][\|]/),
 term('Terminals.sv', 27, 9, 'dc:NotOp_t', /[\!]/),
 term('Terminals.sv', 35, 16, 'dc:WhiteSpace_t', /[\t\n\ ]+/),
 term('Terminals.sv', 36, 16, 'dc:LineComment_P', /[\/][\/].*/),
 nt('ConcreteSyntax.sv', 9, 12, 'dc:Root_c', [], nt('dc:Root_c', [])),
 nt('ConcreteSyntax.sv', 24, 12, 'dc:LogiOr_c', [], nt('dc:LogiOr_c', [])),
 nt('ConcreteSyntax.sv', 25, 12, 'dc:LogiAnd_c', [], nt('dc:LogiAnd_c', [])),
 nt('ConcreteSyntax.sv', 26, 12, 'dc:Cmpe_c', [], nt('dc:Cmpe_c', [])),
 nt('ConcreteSyntax.sv', 27, 12, 'dc:Cmplg_c', [], nt('dc:Cmplg_c', [])),
 nt('ConcreteSyntax.sv', 28, 12, 'dc:Expr_c', [], nt('dc:Expr_c', [])),
 nt('ConcreteSyntax.sv', 29, 12, 'dc:Term_c', [], nt('dc:Term_c', [])),
 nt('ConcreteSyntax.sv', 30, 12, 'dc:Phrase_c', [], nt('dc:Phrase_c', [])),
 nt('ConcreteSyntax.sv', 31, 12, 'dc:Factor_c', [], nt('dc:Factor_c', [])),
 nt('ConcreteSyntax.sv', 32, 12, 'dc:LogiNot_c', [], nt('dc:LogiNot_c', [])),
 nt('AbstractSyntax.sv', 9, 12, 'dc:Root', [], nt('dc:Root', [])),
 nt('AbstractSyntax.sv', 35, 12, 'dc:Expr', [], nt('dc:Expr', [])),
 fun('Main.sv', 11, 7, [], signature('dc:parse', [element('stringToParse', string), element('filenameToReport', string)], element('__func__lhs', nt('core:ParseResult', [nt('dc:Root_c', [])])))),
 fun('Main.sv', 22, 9, [], signature('dc:main', [element('largs', [string]), element('ioin', io)], element('__func__lhs', nt('core:IOVal', [int])))),
 prod('ConcreteSyntax.sv', 14, 20, [], signature('dc:root_c', [element('e', nt('dc:LogiOr_c', []))], element('r', nt('dc:Root_c', [])))),
 prod('ConcreteSyntax.sv', 40, 20, [], signature('dc:orOp_c', [element('logiOr', nt('dc:LogiOr_c', [])), element('_G_1', term('dc:OrOp_t')), element('logiAnd', nt('dc:LogiAnd_c', []))], element('or', nt('dc:LogiOr_c', [])))),
 prod('ConcreteSyntax.sv', 47, 20, [], signature('dc:andOp_c', [element('logiAnd', nt('dc:LogiAnd_c', [])), element('_G_1', term('dc:AndOp_t')), element('cmpe', nt('dc:Cmpe_c', []))], element('and', nt('dc:LogiAnd_c', [])))),
 prod('ConcreteSyntax.sv', 54, 20, [], signature('dc:notEqualTo_c', [element('cmpe', nt('dc:Cmpe_c', [])), element('_G_1', term('dc:NotEqualTo_t')), element('cmplg', nt('dc:Cmplg_c', []))], element('ne', nt('dc:Cmpe_c', [])))),
 prod('ConcreteSyntax.sv', 61, 20, [], signature('dc:equalTo_c', [element('cmpe', nt('dc:Cmpe_c', [])), element('_G_1', term('dc:EqualTo_t')), element('cmplg', nt('dc:Cmplg_c', []))], element('eq', nt('dc:Cmpe_c', [])))),
 prod('ConcreteSyntax.sv', 68, 20, [], signature('dc:lessThan_c', [element('cmplg', nt('dc:Cmplg_c', [])), element('_G_1', term('dc:LessThan_t')), element('e', nt('dc:Expr_c', []))], element('less', nt('dc:Cmplg_c', [])))),
 prod('ConcreteSyntax.sv', 75, 20, [], signature('dc:lessThanOrEqualTo_c', [element('cmplg', nt('dc:Cmplg_c', [])), element('_G_1', term('dc:LessThanOrEqualTo_t')), element('e', nt('dc:Expr_c', []))], element('le', nt('dc:Cmplg_c', [])))),
 prod('ConcreteSyntax.sv', 82, 20, [], signature('dc:greaterThan_c', [element('cmplg', nt('dc:Cmplg_c', [])), element('_G_1', term('dc:GreaterThan_t')), element('e', nt('dc:Expr_c', []))], element('greater', nt('dc:Cmplg_c', [])))),
 prod('ConcreteSyntax.sv', 89, 20, [], signature('dc:greaterThanOrEqualTo_c', [element('cmplg', nt('dc:Cmplg_c', [])), element('_G_1', term('dc:GreaterThanOrEqualTo_t')), element('e', nt('dc:Expr_c', []))], element('ge', nt('dc:Cmplg_c', [])))),
 prod('ConcreteSyntax.sv', 96, 20, [], signature('dc:add_c', [element('e', nt('dc:Expr_c', [])), element('_G_1', term('dc:Plus_t')), element('t', nt('dc:Term_c', []))], element('sum', nt('dc:Expr_c', [])))),
 prod('ConcreteSyntax.sv', 103, 20, [], signature('dc:sub_c', [element('e', nt('dc:Expr_c', [])), element('_G_1', term('dc:Dash_t')), element('t', nt('dc:Term_c', []))], element('dff', nt('dc:Expr_c', [])))),
 prod('ConcreteSyntax.sv', 110, 20, [], signature('dc:mul_c', [element('t', nt('dc:Term_c', [])), element('_G_1', term('dc:Star_t')), element('f', nt('dc:Phrase_c', []))], element('prd', nt('dc:Term_c', [])))),
 prod('ConcreteSyntax.sv', 117, 20, [], signature('dc:div_c', [element('t', nt('dc:Term_c', [])), element('_G_1', term('dc:Slash_t')), element('f', nt('dc:Phrase_c', []))], element('d', nt('dc:Term_c', [])))),
 prod('ConcreteSyntax.sv', 124, 20, [], signature('dc:pow_c', [element('f', nt('dc:Factor_c', [])), element('_G_1', term('dc:Hat_t')), element('t', nt('dc:Phrase_c', []))], element('pw', nt('dc:Phrase_c', [])))),
 prod('ConcreteSyntax.sv', 131, 20, [], signature('dc:LogiOrLogiAnd_c', [element('logiAnd', nt('dc:LogiAnd_c', []))], element('logiOr', nt('dc:LogiOr_c', [])))),
 prod('ConcreteSyntax.sv', 138, 20, [], signature('dc:LogiAndCmpe_c', [element('cmpe', nt('dc:Cmpe_c', []))], element('logiAnd', nt('dc:LogiAnd_c', [])))),
 prod('ConcreteSyntax.sv', 152, 20, [], signature('dc:CmpeCmlg_c', [element('cmplg', nt('dc:Cmplg_c', []))], element('cmpe', nt('dc:Cmpe_c', [])))),
 prod('ConcreteSyntax.sv', 159, 20, [], signature('dc:CmplgExpr_c', [element('e', nt('dc:Expr_c', []))], element('cmplg', nt('dc:Cmplg_c', [])))),
 prod('ConcreteSyntax.sv', 166, 20, [], signature('dc:exprTerm_c', [element('t', nt('dc:Term_c', []))], element('e', nt('dc:Expr_c', [])))),
 prod('ConcreteSyntax.sv', 173, 20, [], signature('dc:termPhrase_c', [element('p', nt('dc:Phrase_c', []))], element('t', nt('dc:Term_c', [])))),
 prod('ConcreteSyntax.sv', 180, 20, [], signature('dc:phraseFactor_c', [element('f', nt('dc:Factor_c', []))], element('p', nt('dc:Phrase_c', [])))),
 prod('ConcreteSyntax.sv', 187, 20, [], signature('dc:FactorLogiNot_c', [element('logiNot', nt('dc:LogiNot_c', []))], element('f', nt('dc:Factor_c', [])))),
 prod('ConcreteSyntax.sv', 194, 20, [], signature('dc:nested_c', [element('_G_2', term('dc:LParen_t')), element('inner', nt('dc:LogiOr_c', [])), element('_G_0', term('dc:RParen_t'))], element('e', nt('dc:LogiNot_c', [])))),
 prod('ConcreteSyntax.sv', 201, 20, [], signature('dc:integerConstant_c', [element('i', term('dc:IntLit_t'))], element('ic', nt('dc:LogiNot_c', [])))),
 prod('AbstractSyntax.sv', 22, 20, [], signature('dc:root', [element('e', nt('dc:Expr', []))], element('r', nt('dc:Root', [])))),
 fun('AbstractSyntax.sv', 29, 9, [], signature('dc:toInteger', [element('b', bool)], element('__func__lhs', int))),
 prod('AbstractSyntax.sv', 37, 20, [], signature('dc:lessThan', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('less', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 44, 20, [], signature('dc:lessThanOrEqualTo', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('le', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 51, 20, [], signature('dc:greaterThan', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('greater', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 58, 20, [], signature('dc:greaterThanOrEqualTo', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('ge', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 65, 20, [], signature('dc:equalTo', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('eq', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 72, 20, [], signature('dc:notEqualTo', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('neq', nt('dc:Expr', [])))),
 fun('AbstractSyntax.sv', 79, 9, [], signature('dc:toBoolean', [element('i', int)], element('__func__lhs', bool))),
 prod('AbstractSyntax.sv', 85, 20, [], signature('dc:andOp', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('and', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 92, 20, [], signature('dc:orOp', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('or', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 99, 20, [], signature('dc:notOp', [element('e', nt('dc:Expr', []))], element('not', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 106, 20, [], signature('dc:add', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('sum', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 113, 20, [], signature('dc:sub', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('dff', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 120, 20, [], signature('dc:mul', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('prd', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 127, 20, [], signature('dc:div', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('quo', nt('dc:Expr', [])))),
 fun('AbstractSyntax.sv', 134, 9, [], signature('dc:pow_helper', [element('base', int), element('ex', int)], element('__func__lhs', int))),
 prod('AbstractSyntax.sv', 140, 20, [], signature('dc:pow', [element('l', nt('dc:Expr', [])), element('r', nt('dc:Expr', []))], element('exp', nt('dc:Expr', [])))),
 prod('AbstractSyntax.sv', 147, 20, [], signature('dc:integerConstant', [element('i', term('dc:IntLit_t'))], element('e', nt('dc:Expr', [])))),
 fun('BetterPP.sv', 37, 9, [], signature('dc:wrapInParens', [element('enclosingPrecedence', int), element('thisPrecedence', int), element('thisPosition', string), element('opAssociativity', string)], element('__func__lhs', bool))),
 syn('ConcreteSyntax.sv', 11, 22, 'dc:ast_Root', [], nt('dc:Root', [])),
 syn('ConcreteSyntax.sv', 22, 22, 'dc:ast_Expr', [], nt('dc:Expr', [])),
 syn('AbstractSyntax.sv', 12, 22, 'dc:pp', [], string),
 syn('AbstractSyntax.sv', 18, 22, 'dc:value', [], int),
 syn('BetterPP.sv', 8, 22, 'dc:bpp', [], string),
 inh('BetterPP.sv', 27, 20, 'dc:enclosingOpPrecedence', [], int),
 inh('BetterPP.sv', 32, 20, 'dc:leftOrRight', [], string),
 @('ConcreteSyntax.sv', 9, 24, 'dc:Root_c', 'dc:pp', [], nt('dc:Root_c', []), string),
 @('ConcreteSyntax.sv', 9, 28, 'dc:Root_c', 'dc:ast_Root', [], nt('dc:Root_c', []), nt('dc:Root', [])),
 @('ConcreteSyntax.sv', 24, 28, 'dc:LogiOr_c', 'dc:pp', [], nt('dc:LogiOr_c', []), string),
 @('ConcreteSyntax.sv', 24, 32, 'dc:LogiOr_c', 'dc:ast_Expr', [], nt('dc:LogiOr_c', []), nt('dc:Expr', [])),
 @('ConcreteSyntax.sv', 25, 28, 'dc:LogiAnd_c', 'dc:pp', [], nt('dc:LogiAnd_c', []), string),
 @('ConcreteSyntax.sv', 25, 32, 'dc:LogiAnd_c', 'dc:ast_Expr', [], nt('dc:LogiAnd_c', []), nt('dc:Expr', [])),
 @('ConcreteSyntax.sv', 26, 28, 'dc:Cmpe_c', 'dc:pp', [], nt('dc:Cmpe_c', []), string),
 @('ConcreteSyntax.sv', 26, 32, 'dc:Cmpe_c', 'dc:ast_Expr', [], nt('dc:Cmpe_c', []), nt('dc:Expr', [])),
 @('ConcreteSyntax.sv', 27, 28, 'dc:Cmplg_c', 'dc:pp', [], nt('dc:Cmplg_c', []), string),
 @('ConcreteSyntax.sv', 27, 32, 'dc:Cmplg_c', 'dc:ast_Expr', [], nt('dc:Cmplg_c', []), nt('dc:Expr', [])),
 @('ConcreteSyntax.sv', 28, 28, 'dc:Expr_c', 'dc:pp', [], nt('dc:Expr_c', []), string),
 @('ConcreteSyntax.sv', 28, 32, 'dc:Expr_c', 'dc:ast_Expr', [], nt('dc:Expr_c', []), nt('dc:Expr', [])),
 @('ConcreteSyntax.sv', 29, 28, 'dc:Term_c', 'dc:pp', [], nt('dc:Term_c', []), string),
 @('ConcreteSyntax.sv', 29, 32, 'dc:Term_c', 'dc:ast_Expr', [], nt('dc:Term_c', []), nt('dc:Expr', [])),
 @('ConcreteSyntax.sv', 30, 28, 'dc:Phrase_c', 'dc:pp', [], nt('dc:Phrase_c', []), string),
 @('ConcreteSyntax.sv', 30, 32, 'dc:Phrase_c', 'dc:ast_Expr', [], nt('dc:Phrase_c', []), nt('dc:Expr', [])),
 @('ConcreteSyntax.sv', 31, 28, 'dc:Factor_c', 'dc:pp', [], nt('dc:Factor_c', []), string),
 @('ConcreteSyntax.sv', 31, 32, 'dc:Factor_c', 'dc:ast_Expr', [], nt('dc:Factor_c', []), nt('dc:Expr', [])),
 @('ConcreteSyntax.sv', 32, 28, 'dc:LogiNot_c', 'dc:pp', [], nt('dc:LogiNot_c', []), string),
 @('ConcreteSyntax.sv', 32, 32, 'dc:LogiNot_c', 'dc:ast_Expr', [], nt('dc:LogiNot_c', []), nt('dc:Expr', [])),
 @('AbstractSyntax.sv', 14, 10, 'dc:Root', 'dc:pp', [], nt('dc:Root', []), string),
 @('AbstractSyntax.sv', 18, 22, 'dc:Root', 'dc:value', [], nt('dc:Root', []), int),
 @('AbstractSyntax.sv', 35, 22, 'dc:Expr', 'dc:pp', [], nt('dc:Expr', []), string),
 @('AbstractSyntax.sv', 35, 26, 'dc:Expr', 'dc:value', [], nt('dc:Expr', []), int),
 @('BetterPP.sv', 8, 22, 'dc:Root', 'dc:bpp', [], nt('dc:Root', []), string),
 @('BetterPP.sv', 8, 22, 'dc:Expr', 'dc:bpp', [], nt('dc:Expr', []), string),
 @('BetterPP.sv', 27, 20, 'dc:Expr', 'dc:enclosingOpPrecedence', [], nt('dc:Expr', []), int),
 @('BetterPP.sv', 32, 20, 'dc:Expr', 'dc:leftOrRight', [], nt('dc:Expr', []), string)]
exportedGrammars []
condBuild []
terminals [('dc:IntLit_t', [], /[0-9]+/), ('dc:Plus_t', [], /[\+]/), ('dc:Dash_t', [], /[\-]/), ('dc:Star_t', [], /[\*]/), ('dc:Slash_t', [], /[\/]/), ('dc:Hat_t', [], /[\^]/), ('dc:LParen_t', [], /[\(]/), ('dc:RParen_t', [], /[\)]/), ('dc:LessThan_t', [], /[\<]/), ('dc:LessThanOrEqualTo_t', [], /[\<][\=]/), ('dc:GreaterThan_t', [], /[\>]/), ('dc:GreaterThanOrEqualTo_t', [], /[\>][\=]/), ('dc:EqualTo_t', [], /[\=][\=]/), ('dc:NotEqualTo_t', [], /[\!][\=]/), ('dc:AndOp_t', [], /[\&][\&]/), ('dc:OrOp_t', [], /[\|][\|]/), ('dc:NotOp_t', [], /[\!]/), ('dc:WhiteSpace_t', [ignore], /[\t\n\ ]+/), ('dc:LineComment_P', [ignore], /[\/][\/].*/)]
nonterminals ['dc:Root_c', 'dc:LogiOr_c', 'dc:LogiAnd_c', 'dc:Cmpe_c', 'dc:Cmplg_c', 'dc:Expr_c', 'dc:Term_c', 'dc:Phrase_c', 'dc:Factor_c', 'dc:LogiNot_c', 'dc:Root', 'dc:Expr']
rules [('dc:Root_c', [('dc','dc:root_c',['dc:LogiOr_c'],[])]), ('dc:LogiOr_c', [('dc','dc:orOp_c',['dc:LogiOr_c','dc:OrOp_t','dc:LogiAnd_c'],[])]), ('dc:LogiAnd_c', [('dc','dc:andOp_c',['dc:LogiAnd_c','dc:AndOp_t','dc:Cmpe_c'],[])]), ('dc:Cmpe_c', [('dc','dc:notEqualTo_c',['dc:Cmpe_c','dc:NotEqualTo_t','dc:Cmplg_c'],[])]), ('dc:Cmpe_c', [('dc','dc:equalTo_c',['dc:Cmpe_c','dc:EqualTo_t','dc:Cmplg_c'],[])]), ('dc:Cmplg_c', [('dc','dc:lessThan_c',['dc:Cmplg_c','dc:LessThan_t','dc:Expr_c'],[])]), ('dc:Cmplg_c', [('dc','dc:lessThanOrEqualTo_c',['dc:Cmplg_c','dc:LessThanOrEqualTo_t','dc:Expr_c'],[])]), ('dc:Cmplg_c', [('dc','dc:greaterThan_c',['dc:Cmplg_c','dc:GreaterThan_t','dc:Expr_c'],[])]), ('dc:Cmplg_c', [('dc','dc:greaterThanOrEqualTo_c',['dc:Cmplg_c','dc:GreaterThanOrEqualTo_t','dc:Expr_c'],[])]), ('dc:Expr_c', [('dc','dc:add_c',['dc:Expr_c','dc:Plus_t','dc:Term_c'],[])]), ('dc:Expr_c', [('dc','dc:sub_c',['dc:Expr_c','dc:Dash_t','dc:Term_c'],[])]), ('dc:Term_c', [('dc','dc:mul_c',['dc:Term_c','dc:Star_t','dc:Phrase_c'],[])]), ('dc:Term_c', [('dc','dc:div_c',['dc:Term_c','dc:Slash_t','dc:Phrase_c'],[])]), ('dc:Phrase_c', [('dc','dc:pow_c',['dc:Factor_c','dc:Hat_t','dc:Phrase_c'],[])]), ('dc:LogiOr_c', [('dc','dc:LogiOrLogiAnd_c',['dc:LogiAnd_c'],[])]), ('dc:LogiAnd_c', [('dc','dc:LogiAndCmpe_c',['dc:Cmpe_c'],[])]), ('dc:Cmpe_c', [('dc','dc:CmpeCmlg_c',['dc:Cmplg_c'],[])]), ('dc:Cmplg_c', [('dc','dc:CmplgExpr_c',['dc:Expr_c'],[])]), ('dc:Expr_c', [('dc','dc:exprTerm_c',['dc:Term_c'],[])]), ('dc:Term_c', [('dc','dc:termPhrase_c',['dc:Phrase_c'],[])]), ('dc:Phrase_c', [('dc','dc:phraseFactor_c',['dc:Factor_c'],[])]), ('dc:Factor_c', [('dc','dc:FactorLogiNot_c',['dc:LogiNot_c'],[])]), ('dc:LogiNot_c', [('dc','dc:nested_c',['dc:LParen_t','dc:LogiOr_c','dc:RParen_t'],[])]), ('dc:LogiNot_c', [('dc','dc:integerConstant_c',['dc:IntLit_t'],[])])]
parser 'dc:parse', 'dc:Root_c', ['dc']